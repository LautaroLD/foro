// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("REDACTIVA_PRISMA_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([id], name: "idx_account_id")
  @@index([userId], name: "idx_account_user_id")
  @@index([provider, providerAccountId], name: "idx_account_provider_provider_account_id")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken], name: "idx_session_session_token")
  @@index([userId], name: "idx_session_user_id")
  @@index([expires], name: "idx_session_expires")
  @@index([sessionToken, userId], name: "idx_session_session_token_user_id")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires], name: "idx_verification_token_expires")
  @@index([identifier], name: "idx_verification_token_identifier")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String?
  firstName     String
  lastName      String
  posts         Post[]
  comments      Comment[]
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  tags          Tag[]         @relation("UserTags")
  categories    Category[]    @relation("UserCategories")
  likePosts     LikePost[]
  likeComments  LikeComment[]
  createdAt     DateTime      @default(now())

  @@index([email], name: "idx_user_email")
  @@index([firstName], name: "idx_user_first_name")
  @@index([lastName], name: "idx_user_last_name")
  @@index([emailVerified], name: "idx_user_email_verified")
  @@index([id], name: "idx_user_id")
}

model File {
  id       String @id @default(uuid())
  type     String
  src      String
  Post     Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  publicId String

  @@index([postId], name: "idx_file_post_id")
  @@index([type], name: "idx_file_type")
  @@index([publicId], name: "idx_file_public_id")
  @@index([src], name: "idx_file_src")
}

model Post {
  id          String     @id @default(uuid())
  title       String
  content     String?
  typeContent String
  files       File[]
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  comments    Comment[]
  categories  Category[] @relation("PostCategories")
  tags        Tag[]      @relation("PostTags")
  likes       LikePost[]
  createdAt   DateTime   @default(now())

  @@index([authorId], name: "idx_post_author_id")
  @@index([title], name: "idx_post_title")
  @@index([typeContent], name: "idx_post_type_content")
  @@index([createdAt], name: "idx_post_created_at")
}

model LikePost {
  id     String  @id @default(uuid())
  postId String?
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@index([postId], name: "idx_like_post_post_id")
  @@index([userId], name: "idx_like_post_user_id")
}

model LikeComment {
  id        String   @id @default(uuid())
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?

  @@index([commentId], name: "idx_like_comment_comment_id")
  @@index([userId], name: "idx_like_comment_user_id")
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostTags")
  users User[] @relation("UserTags")

  @@index([name], name: "idx_tag_name")
  @@index([slug], name: "idx_tag_slug")
}

model Comment {
  id        String        @id @default(uuid())
  content   String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     LikeComment[]
  createdAt DateTime      @default(now())

  @@index([postId], name: "idx_comment_post_id")
  @@index([authorId], name: "idx_comment_author_id")
  @@index([createdAt], name: "idx_comment_created_at")
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostCategories")
  users User[] @relation("UserCategories")

  @@index([name], name: "idx_category_name")
  @@index([slug], name: "idx_category_slug")
}
